// Code generated by MockGen. DO NOT EDIT.
// Source: ./async_sms.go
//
// Generated by this command:
//
//	mockgen -source=./async_sms.go -package=daomocks -destination=mocks/async_sms.mock.go AsyncSMSDAO
//

// Package daomocks is a generated GoMock package.
package daomocks

import (
	context "context"
	dao "gindemo/webbook/internal/repository/dao"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAsyncSMSDAO is a mock of AsyncSMSDAO interface.
type MockAsyncSMSDAO struct {
	ctrl     *gomock.Controller
	recorder *MockAsyncSMSDAOMockRecorder
}

// MockAsyncSMSDAOMockRecorder is the mock recorder for MockAsyncSMSDAO.
type MockAsyncSMSDAOMockRecorder struct {
	mock *MockAsyncSMSDAO
}

// NewMockAsyncSMSDAO creates a new mock instance.
func NewMockAsyncSMSDAO(ctrl *gomock.Controller) *MockAsyncSMSDAO {
	mock := &MockAsyncSMSDAO{ctrl: ctrl}
	mock.recorder = &MockAsyncSMSDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsyncSMSDAO) EXPECT() *MockAsyncSMSDAOMockRecorder {
	return m.recorder
}

// GetWaitingSMS mocks base method.
func (m *MockAsyncSMSDAO) GetWaitingSMS(ctx context.Context) (dao.AsyncSMS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWaitingSMS", ctx)
	ret0, _ := ret[0].(dao.AsyncSMS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWaitingSMS indicates an expected call of GetWaitingSMS.
func (mr *MockAsyncSMSDAOMockRecorder) GetWaitingSMS(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWaitingSMS", reflect.TypeOf((*MockAsyncSMSDAO)(nil).GetWaitingSMS), ctx)
}

// Insert mocks base method.
func (m *MockAsyncSMSDAO) Insert(ctx context.Context, s dao.AsyncSMS) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockAsyncSMSDAOMockRecorder) Insert(ctx, s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockAsyncSMSDAO)(nil).Insert), ctx, s)
}

// MarkFailed mocks base method.
func (m *MockAsyncSMSDAO) MarkFailed(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkFailed", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkFailed indicates an expected call of MarkFailed.
func (mr *MockAsyncSMSDAOMockRecorder) MarkFailed(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkFailed", reflect.TypeOf((*MockAsyncSMSDAO)(nil).MarkFailed), ctx, id)
}

// MarkSuccess mocks base method.
func (m *MockAsyncSMSDAO) MarkSuccess(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkSuccess", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkSuccess indicates an expected call of MarkSuccess.
func (mr *MockAsyncSMSDAOMockRecorder) MarkSuccess(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkSuccess", reflect.TypeOf((*MockAsyncSMSDAO)(nil).MarkSuccess), ctx, id)
}
